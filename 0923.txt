
 내부클래스(inner class)

 - 클래스 내부에 선언한 클래스로 이 클래스르 감싸고 잇는 외부 클래스와 
    밀접한 연관이 다른 외부클래스에서 사용할 일이 거의 없는 경우에 
    내부 클래스로 선언해서 사용
 - 중첩 클래스, 내부 클래스의 종류(주로private)
 - 인스턴스 내부 클래스: 자신의 클래스를 관리하기 위해서 private으로 선언.
    변수 선언시 전부 다 final || static
   내부적으로 사용할 클래스를 선언
외부 클래스가 생성된 후 생성됨
 private 이 
 - 지역 내부 클래스(람다식.) : 지역변수와 같이 메서드 내부에서 정의하여 사용하는 클래스
 - 익명 내부 클래스(이름이 없다) : 인터페이스에서 추상화메소드가 1개일 경우 많이쓰임.
    자바, 안드로이드에서 많이 쓰인다.
 - 이름이 없는 클래스(위지역내부 크랠스의 MyRunnable클래스 이름은 실제로 호출되
 - 클래스의 이름을 생략하고 주로 하나의 인터페이스나 하나의 추상클래스를 
    구현하여 반복
 - 인터페이스나 추상 클래스 자료형의 변수에 직접 대입하여 클래스를 
    생성하거나 지역 내부 클래스의 메서드 내부에서 생성하여 반환 할 수 있음.
 
- OutClass.InClass inClass = oc.new  InClass();
  처럼 public으로 선언된 내부클래스에 접근하기 위해 생성. 좋은코드는 아니다~
  클래스를 따로 만들어서 쓰는게 일반적인 접근
 
 - Runnable은 run() 추상 메소드를 가짐. 새로운 쓰레드(지금 현재 메인쓰레드말고)를 생성시키는 인터페이스

 - 함수형인터페이스는 imple해서 쓸수 있지만, 추상화메소드가 한개만 정의되어 있다.
    익명클래스로 생략 가능하다. 함수 내부에서 쓰고 끝낸다.
 
(ch02)
 * 람다식 
 - 자바는 객체지향프로그램 : 기능을 수행하긴 위해서는 객체를 만들고 
    그객체 내부에 멤버변수를 선언
 - 자바 8부터 함수형 프로그래밍 방식을 지원하고 이를 람다식이라 함
 - 함수의 구현과 호출만으로 프로그래밍이 수행되는 방식
 - 함수형 프로그래밍(Functional Programming:FP) 외부의 변수를 사용하하지 않음. 
    함수안에서의

 #함수형 프로그래밍은  순수함수를 구현하고 호출함으로써 외부 자료에 부수적인 
   영향을 주지  순수함수란 매개변수만을 사용하여 만드는 함수.
  즉, 함수 내부에서 함수 외부에있는 변수를 사용하지 않아 함수가 
   수행되더라도 외부에는 영향을 주지않음.

 #문법 : (매개변수) -> {실행문;}
 int add(int x, int y){ return x+y; }
  (x,y)->{x+y}

 -매개변수가 하나인 경우 자료형과 괄호 생략가능
 str->{Syso(str);}

 - 매개변수가 두 개 이상인 경우 괄호를 생략할 수 있
 x,y -> {Syso(x+y)}; //오류

 - 실행문이 한 문장인 경우 중괄호 생략 가능
 str -> Syso(str);

 - 실행문이 한 문장이라도 return문(반환문)은 중괄호를 생략할 수 없
 str -> return str.length(); //오류  { return str.length(); }

 - 실행문이 한 문장의 반환문인 경우엔 return과 중괄호를 모두 생략
  (x, y) -> x+y;   //return이 포함되어 있다고 생각.
  str -> str.length;

# 람다식을 선언하기 위한 인터페이스
 - 익명 함수와 매개 변수만으로 구현되므로 인터페이스는 
 단 하나의 메서드(추상화메서드)만을 선언해야함
 public int add (int x, int y), public int sub(int x, int y)>>>
람다가 다음과 같다면 (x, y)->{return x+y;} 모호함.

 - @Functionalinterface. 함수형 인터페이스라는 의미, 내부에 여러 개의 메서드를 선언하면 에러남.















