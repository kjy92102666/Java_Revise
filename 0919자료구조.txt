자료구조1
 -프로그램에서 사용할 많은 데이타를 메모리 상에서 관리하는 여러 구현방법들
 -효율적인 자료구조가 성능 좋은 알고리즘의 기반이됨.
 -자료의 효율적인 관리는 프로그래머의 수행속도를 통해 영향 받음.

[선형 자료구조] : 자료를 구성하는 데이터를 순차적으로 나열시킨 형태
 º배열(Array) : 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 사이즈 정해놓고 시작.
  내 다음의 요소를 알지못함.
 -배열의 element가 삭제되면 뒤에 있는 element를 밀어서 다 채워넣어야 한다.
 -비어있으면 안된다.(stack 개념.중간에 삭제시 뒤에 element 다 밀림.)자바는 매핑되어있음.
 -추가시 [i+1]. 삭제시 [i-1].


 * array의 특징
 - 동일한 데이터 타입을 순서에 따라 관리하는 자료구조
 - 정해진 크기가 있음
 - 요소의 추가와 제거시 다른 요소들의 이동이 필요함
 - 배열의 i번째 요소를 찾는 인덱스 연산이 빠름
  값 제거시(삭제 포지션부터)ㅡ a[i] = a[i+1];,  
  값 추가시(배열의 끝 포지션부터)ㅡ a[i+1] = a[i];
 jdk :ArrayList, Vercor


 ºLinked list : 각 노드들은 내 다음 노드를 알고, 중간이나 순서에 어긋난 노드를 새
   노드로 추가 삭제가 가능.(pre node)
 - 마지막엔 null을 가리킴. *첫 요소만 알면 된다~
 - 바로 못찾아간다(중간부터 찾아갈 수 없다). 처음부터 next 로 순차적으로 찾아감
 - 고로 실행 속도에선 효율이 좋지 않다.(실행 속도가 느리다~)
 - pre-node를 찾는것이 핵심이다. 어떻게? =>for문같은 반복문을 통해서 찾는다.
  A->B->C->D->null.  중에 B를 삭제하기 위해선 pre-node인 A를 찾고, C로 가리키면 된다.
  A에next를 B에next로 하면(A가 C를 모르니 가리키게함.) C를 가리키게 되므로 삭제되는 형태가 된다.
 - 자료를 저장하는 노드에는 자료와 다음 요소를 가리키는 링크가 있음.

노드는 일종의 클래스(객체)라고 생각하기.
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 