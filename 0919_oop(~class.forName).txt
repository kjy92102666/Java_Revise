★oop_pro.cho02 Student,EqualsTest 확인해보고 비교하기.
★PersonTest파일이랑 WristWatch 파일이랑 비교하면서 분석해보기db위주로
인터페이스를 활용한 학점계산기 만들기...??



Objcect
 -모든 클래스는 Object 클래스를 상속 받는다.
 -java.lang.Object는 자동으로 import 된다.
 -클래스의 메서드 중 일부는 재정의해서 사용할 수 있음

*toString() : 객체의 정보를 String으로 바꿔서 사용.
 자신의 정보 값들을 체크할때 @Overriding해서 정보 체크 후 사용.

*equals() : 두 인스턴스의 주소의 값을 비교하여 t/f를 반환. 클래스임을 인지.
 - 재정의하여 두 인스턴스가 논리적으로 동일함의 여부를 구현
 - 인스턴스가 다르더라도 논리적으로 동일한 경우 t를 반환하도록 재정의.
   (같은 학번, 사번,)
 - 물리적으로 다르지만 equals는 논리적으로 재정의 가능.
 - String은 기본적으로 자기자신을 오버라이딩하고있다. 
 비교 연산자, 메소드는 기본적으로 주소를 비교하지만,
==는 주소만 비교, equals는 참조하고있는 값도 비교.

 ※그러나 String str1 = new String("kim");   
	String str2 = new String("kim"); 는 서로 객체를 따로 생성했기에 
 ==로 비교시 다른문자로 출력. equals는 같은 문자로 출력.
 =>재정의해서 사용.
 equals,hashCode 둘 다 재정의해야 함.(파라미터를 실제 사용하는 변수로)

자바 내부에서는 객체를 찾을떄, 내부적으로는 hash주소로 각 개체를 찾음.
*hashCode()는  객체 해시코드란 객체를 식별하는 하나의 정수값
 - 인스턴스 의 저장 주소를 반환
 - 힙메모리에 인스터턴스가 저장되는 방식이 hash방식
 - 정보를 저장, 검색하는 자료구조
 - 자료의 특정값에 대한 찾아 위치를 반환해주는 해시함수를 사용.
 =>hash코드도 마찬가지로 재정의해서 사용.

*equals를 재정의 하면 hashCode도 재정의를 해야한다
ex: 학번으로 equals를 재정의했다면 hashCode도 리턴은 학번으로 리턴.
 - 두 인스턴스가 같다는거승
두 인스턴스에 대한 equals()의 반환 값이 true
동일한 hashCode()값을 반환

 - 논리적으로 동일함을 위해 equals()메서드를 재정의 했다면, 
    hashCode()메서드도 재정의 하여 동일한 hashCode값이 반환되도록 함.
 //객체끼리 비교를 한다==주소값을 비교한다.

*clone() : 객체의 원본을 복제 (implements이므로 인터페이스). exception을 implements.
 - 생성과정의 복잡한 과정을 반복하지 않고 복제 가능.
 - clone()메서드를 사용하면 객체의 정보(멤버변수값등..)가 동일한 또다른 인스턴스가 생성
 - 객체지향 프로그램에서의 정보은닉, 객체 보호의 관점에서 위배될 수 있음
해당 클래스의 clone()메서드의 사용을 허용한다는 의미로  를 명시해줌.
 - 문법
 implements Cloneable{}.
 Override 해줘야함.
 *throws CloneNotSupportedException
 1)clone정의함수->main함수->vm.
 2)try-catch문으로 잡아내기.
 
 ※자바가 안전한 이유:모든지 예외처리를 해서 개발자가 처리를 할 수 있다.
   clone은 정보은닉,.. 에 위배됨. 사용을 권장하지 않음.
 
 
 *String클래스
 String st1 = new String("abc"); //heap에 생성
 String st2 = "abc";  	  //상수풀에 잡힘.
 -힙 메모리에 인스턴스로 생성되는 경우와 상수 풀에 있는 
  주소를 참조하는 두가지 방법
 -힙 메모리는 생성될때마다 다른 주소값을 가지지만, 
 상수 풀의 문자열은 모두 같은주소 값을 참조.

*String builder
 -한번 생성된 String는 불변(immutable)
 - 기존의 String에 연결되는 것이 아닌 새로운 문자열이 생성됨.
   (메모리 낭비가 될 수도...)
 - 하나의 address를 가지고 문자를 붙였다 할 수 있다.
   (그렇지않으면 계속 메모리 생성된다.)
 -append(); 한 메모리에서 문자열을 추가로 덧붙여줌.
 
 *toString : object에 있는 메소드를 재정의. 
  내가 입력한 객체의 값 확인. 객체 로그찍을때 주로 사용.

 Class.forName - (이 함수 클래스를 만나야 작동을 한다~. new ()와의 차이점.)
- 사용시 파라미터엔 클래스가 들어와야한다.
- vm에 조차 로드시켜주지않는다. 클래스(프로젝트,패키지,)이름을 찾아서 
     Class.forName("com.mysql.jdbc.Driver"); 
     <!--Class.forName("풀 경로")가 되는 순간 vm에 static메모리에 올라간다. -->
     conn = DriverManager.getConnection(url, user, password);
     <!-- static 메모리에 올라갔기에 바로 DriverManager를 바로 쓸 수 있다. -->
 

 
 
 