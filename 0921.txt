
제네릭
 클래스에서 사용하는 변수의 자료형이 여러개 일수 있고, 그 기능은 동일한 경우 클래스의 자료형을 특정하지 않고 추후 해당클래스를 사용할 때 지정 할 수 있도록 선언
실제 사용되는 자료형의 변환은 컴파일러에 의해 검증되므로  
 ArrayList <자료형> 변수명 = new ArrayList<>();
 
 <T>에서<>를 다이어몬드 연산자라 함
 - ArrayList<String> list = new ArrayList<>(); 
  // 다이아몬드 연산자 내부에서 자료형은 생략가능
 - 제네릭에서 자료형 추론
   array
 
 T자료형의 범위를 제한할 수 있음 아무타입이나 적용이 되면 안되므로
상위 클래스에서 선언하거나 정의하는 메서드를 활용할 수 있음
상속을 받지않는경우는 T Object

Textends 를 사용한 프로그래밍
GenericPrinter<T>에 material 변수의 자료형을 상속받아 구현
 ex : water는 적용이 되면 안되니 material자료형을 상속받아 타입을 제한
T에 무작위 클래스가 들어갈 수 없게 material클래스를 상속받은 클래스로 한다.

제네릭 메소드

 - 자료형 매개변수를 메서드의 매개변수나 반환 값으로 가지는 메서드는 자료형 매개변수가 하나 이상인 경우도 있음
반환값이 int 혹은 double 혹은 매개변수가 int 혹은 double
제네릭 클래스가 어니어도 내부에 제네릭 
 
컬렉션 프레임워크
 - 프로그램 구현에 필요한 자료구조를 구현해 놓은 jdk라이브러리
 - java.util 패키지에 구현되어 있음
 - 개발에 소요되는 시간을 절약하면서 최적화 된 알고리즘을 사용할 수 있음
 - 여러 구현 클래스와 인터페이스의 활용에 대한 이해가 필요함. 

 자바에서 지원하는 클래스. 
 Colletion-List-(ArrayList,Vector(ArrayList 나오고나서 사용x. 메모리낭비 심함.), LinkedList)
            -Set-(HashSet, TreeSet)

  Map : key,value로 구성. key-동일한 값이 중복허용x.
 -(Hashtable-Properties, HashMap, TreeMap)
 
 hash, map은 int i++; 이런식으로 사용x 가능하도록 하는게 iterator.

 collection 인터페이스
 - 하나의 객체를 관리하기 위한 메서드.
 - 하위에 list와 set인터네이스가 있

 * list 인터페이스
 - 객체를 순서에 따라 저항하고 관리하는데 필요한 메서드가 선언된 인터페이스
 - 자료구조 리스트(배열 연결리스트)의 구현을 위한 인터페이스
 - 중복을 허용함
 ArrayList,Vector,LinkedList,Stack,Queue ... 
 
 
 * Set인터페이스
 - 순서와 관계없이 중복을 허용하지 않고 유일한 값을 관리하는데 필요한 메서드가 선언
 - 아이디, 주민번호, 사번등 관리 유용
 - HashSet,TreeSet등..
 - HashSet의 Key값은 중복이 안된다.
 
 * Map 인터페이스
 - 쌍(pair)로 이루어진 객체를 관리하는데사용하는 메서드들이 선언된 인터페이스
 - 객체는 key-value의 쌍으로 이루어짐, 정렬에 최적화 되어있다!
 - *key는 중복을 허용하지 않음. key를 통해서 value를 리턴받기때문에...
 - HashTable은 잘 안쓴다~, HashMap, Properties, TreeMap등이 Map인터페이스를 구현함.

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 