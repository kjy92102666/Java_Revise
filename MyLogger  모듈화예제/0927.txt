★FileInputStream 처럼 Stream으로 끝나는 애들은 다 쓰고나서 .close()로 닫아줘야함.
★한개의 함수만 호출되고 싶을 시(어디서 호출하든지간에), 
    static을 빌려서 싱글톤생성. 생성자역시 private. 

★.split(" ") : " "기준으로 자르는 함수.

*예외처리
 java는 무조건 죽으면 안된다.
 라는 기초 안정적언어 예외처리에 대한 다양한 방법이 있다
 프로그램에서의 오류

-컴파일 오류(compile error)
 프로그램 코드 작성 중 발생하는 문법적 오류
 최근에는개발환경에서 대부분의 컴파일 오류는 detection됨

-실행 오류(runtime error) 
  실행중인 프로그램이 의도 하지 않은 동작(bug)을 하거나 프로그램이 중지 되는 오류
  실행오류는 비정상 종료가 되는 경우 시스템의 심각한 장애를 발생할 수 있음

*버그는 없을수가 없다. 다양한 상황이 발생할 수 있다.

- 프로그램의 비정상 종료를 피하여 시스템이 원활히 실행되도록
- 실행 오류가 발생한 경우 오류의 과정을 재현하는것은 현실적으로 힘듦
- 오류가 발생한 경우 log를 남겨서 추후log분석을 통해 원인파악
ㅡ> 자바가 안죽는 이유, 위와 같이 모든예외처리를 해놓고 경고를 날림.

*시스템 오류 : 가상머신에서 발생, 프로그래머가 처리 할 수 없는 경우
동적 메모리가 없는 경우, 스택 메모리 오버플로우등

*예외 : 프로그램에서 제어 할 수 있는 오류
읽어들이려는 파일이 존재하지 않거나, 네트웍이나 db연결이 안되는 경우

*
 프로그램에서 발생하는 오류에 대해 문법적으로 예외처리를 해야함

모든 예외 클래스의 최상위 클래스는 Exception클래스
자바에서는 다양한 예외들에 대해 그처리르 위한 클래스가 제공되고 있음

Arithmetic Exception : 정수를 0으로 나눈 경우 발생
Null
ClassNotFoundException


ºtry-catch문 - 죽지않기 위해 예외처리를 사용.
 try블록에는 예외가 발생할 가능성이 있는 코드를 작성하고 try블록 안에서 예외가 발생하는 경우 ㄱcatch블록이수행됨
 프로그래머가 예외를 처리해줘야 하는 에(배열의 오류 처리)

 -e.printStackTrace();	- 호출된 순서대로 역추적해서 로그를 다 찍게함. 
             로그를 찍어주긴 하지만 죽진 않음, 말 그대로 로그만 표시.


 -throws Exception{} 하면 상위 클래스?쪽으로 날린다.
   (메인에서 날리면 jvm으로 날아가서 결국 죽는다)
    if(q==5) throw new Exception();	//변수에도 예외처리 가능.

try-catch-finally문 (finally - 무조건 한 번은 실행된다~)
 finally 블럭에서 파일을 닫거나 네트웍을 닫는 등의 리소스 해제 구현을 함
 try{} 블럭이 수행되는 경우, fianally{}블럭은 항상 수행됨.



*try-with-resource문
자바7~
리소스를 사용하느 경우 close()하지 않아도 자동으로 해제 되도록 함
리소스를 try() 내부에서 선언해야함
try{}블록에서 열린 리소스는 정상적인 경우나 예외가 발생한 경우 모두 자동으로
FileInputStream의 경우에는 Autocloseable의 구현하고 있음


imple... closable 한 클래스들은 try{}안에 집어 넣으면 자동으로 해주겠다.


*logging
시스템 운영에 대한 기록
 - 오류가 발생 했을 때 그 오류에 대한 기록을 남겨 디버깅을 용이하게 함
 - 로그 파일에 기록하는 코드를 추가하여 필요한 정보가 로그로 남을 수 있도록 한다
 - 디버깅, 시스템 에러 추적, 성능, 문제점 향상들을 위해 사용
     어느정도까지 로그를 남길 것인가?

너무 적은 로그 : 정확한 시스템의 상황을 파악하기 어려움
너무 많은 로그 : 빈번한file I/O의 오버헤드와 로그 파일의 백업 문제등...

java.util.logging
-자바에서 기본적으로 제공되는 log package
-파일이나 콘솔에 로그 내용을 출력할 수 있음
-logging 패키지에서 제공하는 로그 레벨은 
 severe,warnign,info,config,fine,finer,finest임
-오픈소스로는 log4j를 많이 사용하고 있음

Logger는 2개의 핸들러를 가진다. 설명 한 번 듣기.
File, Console






